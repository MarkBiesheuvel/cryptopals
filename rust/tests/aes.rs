use cryptopals::{Bytes, Hexadecimal};

// Following the steps of https://kavaliro.com/wp-content/uploads/2014/03/AES.pdf

// Rijndael S-box
const S_BOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9,
    0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f,
    0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07,
    0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3,
    0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58,
    0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3,
    0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f,
    0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac,
    0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a,
    0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
    0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11,
    0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42,
    0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

fn load(bytes: Vec<u8>) -> [u8; 16] {
    let mut array = [0u8; 16];
    for (x, p) in bytes.into_iter().zip(array.iter_mut()) {
        *p = x;
    }
    array
}

fn sub_byte(input: u8) -> u8 {
    S_BOX[input as usize]
}

fn round_constant(i: u8) -> Result<[u8; 4], String> {
    match i {
        1 => Ok([1, 0, 0, 0]),
        2 => Ok([2, 0, 0, 0]),
        3 => Ok([4, 0, 0, 0]),
        4 => Ok([8, 0, 0, 0]),
        5 => Ok([16, 0, 0, 0]),
        6 => Ok([32, 0, 0, 0]),
        7 => Ok([64, 0, 0, 0]),
        8 => Ok([128, 0, 0, 0]),
        9 => Ok([27, 0, 0, 0]),
        10 => Ok([54, 0, 0, 0]),
        _ => Err(String::from("invalid round number")),
    }
}

#[test]
fn aes() {
    let key = Bytes::from("Thats my Kung Fu");
    let _plaintext = Bytes::from("Two One Nine Two");

    // Convert into a array of fixed size for easier calculation
    let mut prev = load(key.iter().map(|x| *x).collect::<Vec<_>>());

    for i in 1..=10 {
        // Start with a blank slate
        let mut next = [0u8; 16];

        // Round constant
        let constant = round_constant(i).unwrap();

        // w[4] = w[0] XOR g(w[3])
        next[0] = prev[0] ^ sub_byte(prev[13]) ^ constant[0];
        next[1] = prev[1] ^ sub_byte(prev[14]) ^ constant[1];
        next[2] = prev[2] ^ sub_byte(prev[15]) ^ constant[2];
        next[3] = prev[3] ^ sub_byte(prev[12]) ^ constant[3];

        // w[5] = w[4] XOR w[1]
        next[4] = next[0] ^ prev[4];
        next[5] = next[1] ^ prev[5];
        next[6] = next[2] ^ prev[6];
        next[7] = next[3] ^ prev[7];

        // w[6] = w[5] XOR w[2]
        next[8] = next[4] ^ prev[8];
        next[9] = next[5] ^ prev[9];
        next[10] = next[6] ^ prev[10];
        next[11] = next[7] ^ prev[11];

        // w[7] = w[6] XOR w[3]
        next[12] = next[8] ^ prev[12];
        next[13] = next[9] ^ prev[13];
        next[14] = next[10] ^ prev[14];
        next[15] = next[11] ^ prev[15];

        // Construct roundkey
        let roundkey = Bytes::from(next);

        let expected = match i {
            1 => "E2 32 FC F1 91 12 91 88 B1 59 E4 E6 D6 79 A2 93",
            2 => "56 08 20 07 C7 1A B1 8F 76 43 55 69 A0 3A F7 FA",
            3 => "D2 60 0D E7 15 7A BC 68 63 39 E9 01 C3 03 1E FB",
            4 => "A1 12 02 C9 B4 68 BE A1 D7 51 57 A0 14 52 49 5B",
            5 => "B1 29 3B 33 05 41 85 92 D2 10 D2 32 C6 42 9B 69",
            6 => "BD 3D C2 87 B8 7C 47 15 6A 6C 95 27 AC 2E 0E 4E",
            7 => "CC 96 ED 16 74 EA AA 03 1E 86 3F 24 B2 A8 31 6A",
            8 => "8E 51 EF 21 FA BB 45 22 E4 3D 7A 06 56 95 4B 6C",
            9 => "BF E2 BF 90 45 59 FA B2 A1 64 80 B4 F7 F1 CB D8",
            10 => "28 FD DE F8 6D A4 24 4A CC C0 A4 FE 3B 31 6F 26",
            _ => panic!(),
        };
        let expected = Bytes::try_from(Hexadecimal::from(expected)).unwrap();

        assert_eq!(roundkey, expected);

        // Next because previous
        prev = next;
    }
}
